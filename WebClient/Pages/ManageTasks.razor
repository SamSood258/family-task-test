@page "/manage-tasks"
@inherits TasksBase
@inject HttpClient Http
@using FamilyTask.Components
@using FamilyTask.Shared.Components

@if (isLoaded)
{
<div class="page-wrapper row m-0 col-12 p-0">
    <div class="col-4 p-0">
        <LeftMenu MenuItems="@leftMenuItem" OnAddItem="@onAddItem"  onAssignTask ="@onAssignTask"/>
    </div>
    <div class="col-8 p-0">
        @if (showLister)
        {
<div class="col-10 offset-1 pt-5">
    <TaskCreator onAddCallback="@onAddTask" />
</div>
                    <div class="col-10 offset-1">
                        <TaskListerComponent Tasks="@tasksToShow"  onDoneCallBack="@onDoneTask"/>
                    </div>}
        @if (showCreator)
        {
<div class="col-10 offset-1 pt-5">
    <FamilyMemberCreator onAddCallback="@onMemberAdd" />
</div>}
    </div>
</div>}

@code { private FamilyMember[] members;
    private MenuItem[] leftMenuItem;
    private bool isLoaded;
    private bool showLister;
    private bool showCreator;
    protected override async Task OnInitializedAsync()
    {
        members = await Http.GetFromJsonAsync<FamilyMember[]>("sample-data/family-members.json");
        allTasks = await Http.GetFromJsonAsync<List<TaskModel>>("sample-data/tasks.json");

        leftMenuItem = new MenuItem[members.Length + 1];
        leftMenuItem[0] = new MenuItem
        {
            label = "All Tasks",
            referenceId = Guid.Empty,
            isActive = true
        };
        leftMenuItem[0].ClickCallback += showAllTasks;
        for (int i = 1; i < members.Length + 1; i++)
        {
            leftMenuItem[i] = new MenuItem
            {
                iconColor = members[i - 1].avtar,
                label = members[i - 1].firstname,
                referenceId = members[i - 1].id,
                isActive = false
            };
            leftMenuItem[i].ClickCallback += onItemClick;
        }
        showAllTasks(null, leftMenuItem[0]);
        isLoaded = true;
    }

    private void onAddItem()
    {
        showLister = false;
        showCreator = true;
        makeMenuItemActive(null);
        StateHasChanged();
    }

    private void onItemClick(object sender, object e)
    {
        Guid val = (Guid)e.GetType().GetProperty("referenceId").GetValue(e);
        familyMemberId = val;
        makeMenuItemActive(e);
        if (allTasks != null && allTasks.Count > 0)
        {
            tasksToShow = allTasks.Where(item =>
            {
                if (item.member != null)
                {
                    return item.member.id == val;
                }
                else
                {
                    return false;
                }
            }).ToList();
        }
        showLister = true;
        showCreator = false;
        StateHasChanged();
    }

    private void showAllTasks(object sender, object e)
    {
        tasksToShow = allTasks;
        familyMemberId = null;
        showLister = true;
        showCreator = false;
        makeMenuItemActive(e);
        StateHasChanged();
    }

    private void makeMenuItemActive(object e)
    {
        foreach (var item in leftMenuItem)
        {
            item.isActive = false;
        }
        if (e != null)
        {
            e.GetType().GetProperty("isActive").SetValue(e, true);
        }
    }

    private void onMemberAdd()
    {
        Console.WriteLine("on member add");
    } }